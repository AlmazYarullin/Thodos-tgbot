import telebot
import config
from task import To_do
from data_handler import Data
from task import User
from telebot import types


def show_main_keyboard(items):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ù–æ–≤—ã–π —Ç—É–¥—É")
    item2 = types.KeyboardButton("–ú–æ–∏ —Ç—É–¥—É")
    markup.add(item1, item2)
    if items:
        for item in items:
            item = types.KeyboardButton(item)
            markup.add(item)
    return markup


bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    if message.text == '/start':
        Data().register_user(message.from_user.id, message.from_user.username)
        bot.send_message(message.chat.id,
                         "–ü—Ä–∏–≤–µ—Ç, —è –¢–æ–¥–æ—Å - –±–æ—Ç –∏ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n"
                         "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –≤—ã–±–∏—Ç—å—Å—è –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –∏ "
                         "–Ω–µ –∑–∞–±—ã—Ç—å –ø—Ä–æ —Ç–≤–æ–∏ –¥–µ–ª–∞.", reply_markup=show_main_keyboard(0))


@bot.message_handler(content_types=['text'])
def mes(message):
    if not Data().is_registered(message.from_user.id):
        bot.send_message(message.from_user.id, "üö´–î–ª—è –Ω–∞—á–∞–ª–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—èüö´\n–ù–∞–ø–∏—à–∏ /start")
        return
    user = User(message.from_user.id)
    user.bot_status = str(Data().bot_status(user.id))
    # –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–¥—É
    if user.bot_status == 'creating_to_do':
        task = To_do()
        task.create_task(message.text)
        Data().create_task(user.id, task)
        Data().bot_status(user.id, 'waiting')
        bot.send_message(user.id, '–¢—É–¥—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ',
                         reply_markup=show_main_keyboard(0))
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—É–¥—É
    elif user.bot_status.find('editing_to_do') != -1:
        task = To_do()
        if Data().bot_status(user.id).split('_<>_')[1] == 'add':
            task = Data().get_task(user.id, int(Data().bot_status(user.id).split('_<>_')[2]))
            task.text += '\n' + message.text
            task.build_task_out()
        else:
            task.id = Data().bot_status(user.id).split('_<>_')[1]
            task.create_task(message.text)
        Data().update_task(user.id, task)
        bot.send_message(message.chat.id, '–ò–∑–º–µ–Ω–µ–Ω–æ', reply_markup=show_main_keyboard(0))
        Data().bot_status(user.id, 'waiting')
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç—É–¥—É
    elif message.text == '–ù–æ–≤—ã–π —Ç—É–¥—É':
        Data().bot_status(user.id, 'creating_to_do')
        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å",
                                           callback_data='creating_to_do_<>_cancel')
        markup.add(item1)
        bot.send_message(message.chat.id, "–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, "
                                          "–ø–æ—Å–ª–µ - –æ–ø–∏—Å–∞–Ω–∏–µ\n"
                                          "–ù–∞–ø—Ä–∏–º–µ—Ä:", reply_markup=types.ReplyKeyboardRemove())
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n"
                                          "–º–æ–ª–æ–∫–æ, —Ö–ª–µ–±, –±–∞–Ω–∞–Ω—ã", reply_markup=markup)
    # –í—ã–≤–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—É–¥—É
    elif message.text == '–ú–æ–∏ —Ç—É–¥—É':
        if not Data().tasks_exist(user.id):
            bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—É–¥—É', reply_markup=show_main_keyboard(0))
        else:
            bot.send_message(message.chat.id, '–¢–≤–æ–∏ —Ç—É–¥—É:', reply_markup=show_main_keyboard(0))
            for index in range(Data().get_index_of_the_last_task(user.id) + 1):
                task = Data().get_task(user.id, index)
                if not task:
                    continue
                if task.active:
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    item1 = types.InlineKeyboardButton("‚úÖ –°–¥–µ–ª–∞–Ω–æ",
                                                       callback_data='task_<>_done_<>_' + str(index))
                    item2 = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å",
                                                       callback_data='task_<>_delete_<>_' + str(index))
                    item3 = types.InlineKeyboardButton("‚úè –ò–∑–º–µ–Ω–∏—Ç—å",
                                                       callback_data='task_<>_edit_<>_' + str(index))
                    markup.add(item1, item2, item3)

                    bot.send_message(message.chat.id, task.out, reply_markup=markup, parse_mode='html')
                else:
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    item1 = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å",
                                                       callback_data=('task_<>_delete_<>_' + str(index)))
                    markup.add(item1)
                    bot.send_message(message.chat.id, "üü¢ " + task.title, reply_markup=markup, parse_mode='html')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            call_info = call.data.split('_<>_')
            # –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–º–∏ —Ç—É–¥—É
            if call_info[0] == 'task':
                status = call_info[1]
                task = Data().get_task(call.from_user.id, int(call_info[2]))
                # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞–Ω–æ"
                if status == 'done':
                    Data().task_done(call.from_user.id, task.id)
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    item1 = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å",
                                                       callback_data='task_<>_delete_<>_' + str(
                                                           task.id) + '_<>_' + str(call.from_user.id))
                    markup.add(item1)
                    bot.edit_message_text(chat_id=call.message.chat.id,
                                          message_id=call.message.message_id, reply_markup=markup,
                                          text="‚úÖ " + task.title, parse_mode='html')
                # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
                if status == 'delete':
                    Data().delete_task(call.from_user.id, task.id)
                    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
                # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å"
                if status == 'edit':
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    item = types.InlineKeyboardButton("–ü–∞—Ä–∞–º–µ—Ç—Ä: –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å", callback_data='editing_to_do_<>_add_<>_' + str(task.id))
                    markup.add(item)
                    bot.send_message(call.message.chat.id,
                                     "üëá –°–∫–æ–ø–∏—Ä—É–π —Ç—É–¥—É, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å", reply_markup=types.ReplyKeyboardRemove())
                    bot.send_message(call.message.chat.id,
                                     task.title + task.text, reply_markup=markup)
                    Data().bot_status(call.from_user.id, 'editing_to_do_<>_' + str(task.id))
            # –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Ç–º–µ–Ω–æ–π —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–¥—É
            if call_info[0] == 'creating_to_do':
                if call_info[1] == 'cancel' and Data().bot_status(call.from_user.id) == 'creating_to_do':
                    Data().bot_status(call.from_user.id, 'waiting')
                    #                   message_id=call.message.message_id)
                    bot.send_message(call.message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",
                                     parse_mode='html', reply_markup=show_main_keyboard(0))
            # –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç—É–¥—É
            if call_info[0] == 'editing_to_do':
                if call_info[1] == 'add':
                    Data().bot_status(call.from_user.id, 'editing_to_do_<>_add_<>_' + str(call_info[2]))
                    bot.edit_message_text()

    except Exception as e:
        bot.send_message(587925968, repr(e))


bot.polling()
