import telebot
import config
from data import to_do
from data import user
from data import task_callback
from telebot import types

def register_user(telegram_user_id):
	'''–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
	global users
	users.update({telegram_user_id: user(telegram_user_id)})

def erase_deleted_tasks():
	for key in users:
		if users[key]:
			temp_tasks = []
			for task in users[key].tasks:
				if not task.deleted:
					temp_tasks.append(task)
			users[key].tasks = temp_tasks

def main_keyboard(items):
	markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
	item1 = types.KeyboardButton("–ù–æ–≤—ã–π —Ç—É–¥—É")
	item2 = types.KeyboardButton("–ú–æ–∏ —Ç—É–¥—É")
	markup.add(item1, item2)
	if items:
		for item in items:
			item = types.KeyboardButton(item)
	return markup

def new_task(message):
	task = to_do()
	writing_title = True
	for char in message:
		if char == '\n':
			writing_title = False
		if writing_title:
			task.title += char
		else:
			task.text += char
	task.build_task_out()
	return task

global users
users = {}

bot = telebot.TeleBot(config.TOKEN)

@bot.message_handler(commands=['start', 'help'])

def send_welcome(message):
	"""–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
	global user_to_index
	global tasks_from_index
	register_user(message.from_user.id)
	bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —è –¢–æ–¥–æ—Å - –±–æ—Ç –∏ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n"
		"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –≤—ã–±–∏—Ç—å—Å—è –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –∏ "
		"–Ω–µ –∑–∞–±—ã—Ç—å –ø—Ä–æ —Ç–≤–æ–∏ –¥–µ–ª–∞.", reply_markup=main_keyboard(0))

@bot.message_handler(content_types=['text'])

def mes(message):
	global users
	#–û—á–∏—Å—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ç—É–¥—É
	erase_deleted_tasks()
	#–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if not message.from_user.id in users:
		bot.send_message(message.chat.id, 'üö´–î–ª—è –Ω–∞—á–∞–ª–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—èüö´\n–ù–∞–ø–∏—à–∏ /start')

	# –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–¥—É
	elif users[message.from_user.id].bot_status == 'creating_to_do':
		users[message.from_user.id].tasks.append(new_task(message.text))
		users[message.from_user.id].bot_status = 'waiting'
		bot.send_message(message.chat.id, '–¢—É–¥—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ', reply_markup=main_keyboard(0))
	# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—É–¥—É
	elif users[message.from_user.id].bot_status.find('editing_to_do') != -1:
		temp = users[message.from_user.id].bot_status.split('_<>_')
		users[message.from_user.id].tasks[int(temp[1])] = new_task(message.text)
		bot.send_message(message.chat.id, '–ò–∑–º–µ–Ω–µ–Ω–æ')
		users[message.from_user.id].bot_status = 'waiting'
	# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç—É–¥—É
	elif message.text == '–ù–æ–≤—ã–π —Ç—É–¥—É':
		users[message.from_user.id].bot_status = 'creating_to_do'
		markup = types.InlineKeyboardMarkup(row_width=2)
		item1 = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data='creating_to_do_<>_cancel')
		markup.add(item1)
		bot.send_message(message.chat.id, "–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, "
			"–ø–æ—Å–ª–µ - –æ–ø–∏—Å–∞–Ω–∏–µ\n"
			"–ù–∞–ø—Ä–∏–º–µ—Ä:\n–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n"
			"–º–æ–ª–æ–∫–æ, —Ö–ª–µ–±, –±–∞–Ω–∞–Ω—ã", reply_markup=markup)
	# –í—ã–≤–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—É–¥—É
	elif message.text == '–ú–æ–∏ —Ç—É–¥—É':
		if not users[message.from_user.id].tasks:
			bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—É–¥—É', reply_markup=main_keyboard(0))
		else:
			bot.send_message(message.chat.id, '–¢–≤–æ–∏ —Ç—É–¥—É:', reply_markup=main_keyboard(0))
			for index, task in enumerate(users[message.from_user.id].tasks):

				if task.active:
					markup = types.InlineKeyboardMarkup(row_width=2)
					item1 = types.InlineKeyboardButton("‚úÖ –°–¥–µ–ª–∞–Ω–æ", callback_data='task_<>_done_<>_' + str(index) + '_<>_' + str(message.from_user.id))
					item2 = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data='task_<>_delete_<>_' + str(index) + '_<>_' + str(message.from_user.id))
					item3 = types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data='task_<>_edit_<>_' + str(index) + '_<>_' + str(message.from_user.id))

					markup.add(item1, item2, item3)

					bot.send_message(message.chat.id, task.out, reply_markup=markup, parse_mode='html')
				else:
					markup = types.InlineKeyboardMarkup(row_width=2)
					item1 = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=('task_<>_delete_<>_' + str(index) + '_<>_' + str(message.from_user.id)))

					markup.add(item1)
					bot.send_message(message.chat.id, "üü¢ " + task.title, reply_markup=markup, parse_mode='html')


@bot.callback_query_handler(func=lambda call: True)

def callback_inline(call):
	try:
		if call.message:
			global users
			call_info = call.data.split('_<>_')
			# –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–º–∏ —Ç—É–¥—É
			if call_info[0] == 'task':
				task = task_callback(call_info[1], int(call_info[2]), int(call_info[3]))
				# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞–Ω–æ"
				if task.status == 'done':
					users[call.from_user.id].tasks[task.index].active = False

					markup = types.InlineKeyboardMarkup(row_width=2)
					item1 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data='task_<>_delete_<>_' + str(task.index) + '_<>_' + str(call.from_user.id))

					markup.add(item1)
					bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup, text="‚úÖ " + users[call.from_user.id].tasks[task.index].title, parse_mode='html')
				# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
				if task.status == 'delete':
					users[call.from_user.id].tasks[task.index].deleted = True
					bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
				# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å"
				if task.status == 'edit':
					bot.send_message(call.message.chat.id, "üëá –°–∫–æ–ø–∏—Ä—É–π —Ç—É–¥—É, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å")
					bot.send_message(call.message.chat.id, users[call.from_user.id].tasks[task.index].title + users[call.from_user.id].tasks[task.index].text)
					users[call.from_user.id].bot_status = 'editing_to_do_<>_' + str(task.index)
			# –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Ç–º–µ–Ω–æ–π —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–¥—É
			if call_info[0] == 'creating_to_do':
				if call_info[1] == 'cancel':
					users[call.from_user.id].bot_status = 'waiting'
					bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
					bot.send_message(call.message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", parse_mode='html', reply_markup=main_keyboard(0))
	except Exception as e:
		print(repr(e))

bot.polling()